//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\Isicomp.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class IsicompParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, FORMAT=11, ID=12, OPER_TER=13, OPER_FAT=14, PONTUACAO=15, NUM=16, 
		OPE_RELAC=17, DIGIT=18, LETTER=19, T_NULL=20, T_STRING=21, T_INT=22, T_FLOAT=23, 
		T_SOMA=24, T_SUBT=25, T_DIV=26, T_MULT=27, T_MAIOR=28, T_MENOR=29, T_IGUAL=30, 
		T_COMMA=31, T_APARENT=32, T_FPARENT=33, T_ASPAS=34, T_DOT=35, T_UNDERS=36, 
		T_ACHAVE=37, T_FCHAVE=38, T_MAIOR_IGUAL=39, T_MENOR_IGUAL=40, T_IGUAL_RELAC=41, 
		T_DIF=42, WS=43;
	public const int
		RULE_programa = 0, RULE_declare = 1, RULE_blococomando = 2, RULE_comando = 3, 
		RULE_exp_ter = 4, RULE_exp_fat = 5, RULE_exp_relacional = 6, RULE_termo = 7, 
		RULE_se = 8, RULE_atribua = 9, RULE_escreva = 10, RULE_leia = 11, RULE_enquanto = 12, 
		RULE_faca = 13, RULE_string = 14;
	public static readonly string[] ruleNames = {
		"programa", "declare", "blococomando", "comando", "exp_ter", "exp_fat", 
		"exp_relacional", "termo", "se", "atribua", "escreva", "leia", "enquanto", 
		"faca", "string"
	};

	private static readonly string[] _LiteralNames = {
		null, "'programa'", "'fimprog'", "'declare'", "'se'", "'entao'", "'senao'", 
		"'escreva'", "'leia'", "'enquanto'", "'faca'", null, null, null, null, 
		null, null, null, null, null, "'nulo'", "'string'", "'int'", "'float'", 
		"'+'", "'-'", "'/'", "'*'", "'>'", "'<'", "':='", "','", "'('", "')'", 
		"'\"'", "'.'", "'_'", "'{'", "'}'", "'>='", "'<='", "'=='", "'!='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, "FORMAT", 
		"ID", "OPER_TER", "OPER_FAT", "PONTUACAO", "NUM", "OPE_RELAC", "DIGIT", 
		"LETTER", "T_NULL", "T_STRING", "T_INT", "T_FLOAT", "T_SOMA", "T_SUBT", 
		"T_DIV", "T_MULT", "T_MAIOR", "T_MENOR", "T_IGUAL", "T_COMMA", "T_APARENT", 
		"T_FPARENT", "T_ASPAS", "T_DOT", "T_UNDERS", "T_ACHAVE", "T_FCHAVE", "T_MAIOR_IGUAL", 
		"T_MENOR_IGUAL", "T_IGUAL_RELAC", "T_DIF", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Isicomp.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static IsicompParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public IsicompParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public IsicompParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramaContext : ParserRuleContext {
		public DeclareContext declare() {
			return GetRuleContext<DeclareContext>(0);
		}
		public BlococomandoContext blococomando() {
			return GetRuleContext<BlococomandoContext>(0);
		}
		public ITerminalNode T_DOT() { return GetToken(IsicompParser.T_DOT, 0); }
		public ITerminalNode[] WS() { return GetTokens(IsicompParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(IsicompParser.WS, i);
		}
		public ProgramaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programa; } }
		public override void EnterRule(IParseTreeListener listener) {
			IIsicompListener typedListener = listener as IIsicompListener;
			if (typedListener != null) typedListener.EnterPrograma(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIsicompListener typedListener = listener as IIsicompListener;
			if (typedListener != null) typedListener.ExitPrograma(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsicompVisitor<TResult> typedVisitor = visitor as IIsicompVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrograma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramaContext programa() {
		ProgramaContext _localctx = new ProgramaContext(Context, State);
		EnterRule(_localctx, 0, RULE_programa);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30; Match(T__0);
			State = 32;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 31; Match(WS);
				}
			}

			State = 34; declare();
			State = 36;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 35; Match(WS);
				}
			}

			State = 38; blococomando();
			State = 40;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 39; Match(WS);
				}
			}

			State = 42; Match(T__1);
			State = 43; Match(T_DOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareContext : ParserRuleContext {
		public ITerminalNode[] ID() { return GetTokens(IsicompParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(IsicompParser.ID, i);
		}
		public ITerminalNode T_DOT() { return GetToken(IsicompParser.T_DOT, 0); }
		public ITerminalNode WS() { return GetToken(IsicompParser.WS, 0); }
		public ITerminalNode[] T_COMMA() { return GetTokens(IsicompParser.T_COMMA); }
		public ITerminalNode T_COMMA(int i) {
			return GetToken(IsicompParser.T_COMMA, i);
		}
		public DeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare; } }
		public override void EnterRule(IParseTreeListener listener) {
			IIsicompListener typedListener = listener as IIsicompListener;
			if (typedListener != null) typedListener.EnterDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIsicompListener typedListener = listener as IIsicompListener;
			if (typedListener != null) typedListener.ExitDeclare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsicompVisitor<TResult> typedVisitor = visitor as IIsicompVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareContext declare() {
		DeclareContext _localctx = new DeclareContext(Context, State);
		EnterRule(_localctx, 2, RULE_declare);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45; Match(T__2);
			State = 47;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 46; Match(WS);
				}
			}

			State = 49; Match(ID);
			State = 54;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T_COMMA) {
				{
				{
				State = 50; Match(T_COMMA);
				State = 51; Match(ID);
				}
				}
				State = 56;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 57; Match(T_DOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlococomandoContext : ParserRuleContext {
		public ComandoContext[] comando() {
			return GetRuleContexts<ComandoContext>();
		}
		public ComandoContext comando(int i) {
			return GetRuleContext<ComandoContext>(i);
		}
		public BlococomandoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blococomando; } }
		public override void EnterRule(IParseTreeListener listener) {
			IIsicompListener typedListener = listener as IIsicompListener;
			if (typedListener != null) typedListener.EnterBlococomando(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIsicompListener typedListener = listener as IIsicompListener;
			if (typedListener != null) typedListener.ExitBlococomando(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsicompVisitor<TResult> typedVisitor = visitor as IIsicompVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlococomando(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlococomandoContext blococomando() {
		BlococomandoContext _localctx = new BlococomandoContext(Context, State);
		EnterRule(_localctx, 4, RULE_blococomando);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 59; comando();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 62;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComandoContext : ParserRuleContext {
		public LeiaContext leia() {
			return GetRuleContext<LeiaContext>(0);
		}
		public EscrevaContext escreva() {
			return GetRuleContext<EscrevaContext>(0);
		}
		public AtribuaContext atribua() {
			return GetRuleContext<AtribuaContext>(0);
		}
		public SeContext se() {
			return GetRuleContext<SeContext>(0);
		}
		public EnquantoContext enquanto() {
			return GetRuleContext<EnquantoContext>(0);
		}
		public FacaContext faca() {
			return GetRuleContext<FacaContext>(0);
		}
		public ComandoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comando; } }
		public override void EnterRule(IParseTreeListener listener) {
			IIsicompListener typedListener = listener as IIsicompListener;
			if (typedListener != null) typedListener.EnterComando(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIsicompListener typedListener = listener as IIsicompListener;
			if (typedListener != null) typedListener.ExitComando(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsicompVisitor<TResult> typedVisitor = visitor as IIsicompVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComando(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComandoContext comando() {
		ComandoContext _localctx = new ComandoContext(Context, State);
		EnterRule(_localctx, 6, RULE_comando);
		try {
			State = 70;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__7:
				EnterOuterAlt(_localctx, 1);
				{
				State = 64; leia();
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 2);
				{
				State = 65; escreva();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 66; atribua();
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 4);
				{
				State = 67; se();
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 5);
				{
				State = 68; enquanto();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 6);
				{
				State = 69; faca();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exp_terContext : ParserRuleContext {
		public Exp_fatContext[] exp_fat() {
			return GetRuleContexts<Exp_fatContext>();
		}
		public Exp_fatContext exp_fat(int i) {
			return GetRuleContext<Exp_fatContext>(i);
		}
		public ITerminalNode[] OPER_TER() { return GetTokens(IsicompParser.OPER_TER); }
		public ITerminalNode OPER_TER(int i) {
			return GetToken(IsicompParser.OPER_TER, i);
		}
		public Exp_terContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp_ter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IIsicompListener typedListener = listener as IIsicompListener;
			if (typedListener != null) typedListener.EnterExp_ter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIsicompListener typedListener = listener as IIsicompListener;
			if (typedListener != null) typedListener.ExitExp_ter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsicompVisitor<TResult> typedVisitor = visitor as IIsicompVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_ter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exp_terContext exp_ter() {
		Exp_terContext _localctx = new Exp_terContext(Context, State);
		EnterRule(_localctx, 8, RULE_exp_ter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72; exp_fat();
			State = 77;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OPER_TER) {
				{
				{
				State = 73; Match(OPER_TER);
				State = 74; exp_fat();
				}
				}
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exp_fatContext : ParserRuleContext {
		public ITerminalNode NUM() { return GetToken(IsicompParser.NUM, 0); }
		public ITerminalNode[] OPER_FAT() { return GetTokens(IsicompParser.OPER_FAT); }
		public ITerminalNode OPER_FAT(int i) {
			return GetToken(IsicompParser.OPER_FAT, i);
		}
		public TermoContext[] termo() {
			return GetRuleContexts<TermoContext>();
		}
		public TermoContext termo(int i) {
			return GetRuleContext<TermoContext>(i);
		}
		public Exp_fatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp_fat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IIsicompListener typedListener = listener as IIsicompListener;
			if (typedListener != null) typedListener.EnterExp_fat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIsicompListener typedListener = listener as IIsicompListener;
			if (typedListener != null) typedListener.ExitExp_fat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsicompVisitor<TResult> typedVisitor = visitor as IIsicompVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_fat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exp_fatContext exp_fat() {
		Exp_fatContext _localctx = new Exp_fatContext(Context, State);
		EnterRule(_localctx, 10, RULE_exp_fat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80; Match(NUM);
			State = 85;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OPER_FAT) {
				{
				{
				State = 81; Match(OPER_FAT);
				State = 82; termo();
				}
				}
				State = 87;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exp_relacionalContext : ParserRuleContext {
		public ITerminalNode OPE_RELAC() { return GetToken(IsicompParser.OPE_RELAC, 0); }
		public ITerminalNode[] ID() { return GetTokens(IsicompParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(IsicompParser.ID, i);
		}
		public ITerminalNode[] NUM() { return GetTokens(IsicompParser.NUM); }
		public ITerminalNode NUM(int i) {
			return GetToken(IsicompParser.NUM, i);
		}
		public Exp_relacionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp_relacional; } }
		public override void EnterRule(IParseTreeListener listener) {
			IIsicompListener typedListener = listener as IIsicompListener;
			if (typedListener != null) typedListener.EnterExp_relacional(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIsicompListener typedListener = listener as IIsicompListener;
			if (typedListener != null) typedListener.ExitExp_relacional(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsicompVisitor<TResult> typedVisitor = visitor as IIsicompVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExp_relacional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exp_relacionalContext exp_relacional() {
		Exp_relacionalContext _localctx = new Exp_relacionalContext(Context, State);
		EnterRule(_localctx, 12, RULE_exp_relacional);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			_la = TokenStream.LA(1);
			if ( !(_la==ID || _la==NUM) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 89; Match(OPE_RELAC);
			State = 90;
			_la = TokenStream.LA(1);
			if ( !(_la==ID || _la==NUM) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermoContext : ParserRuleContext {
		public ITerminalNode NUM() { return GetToken(IsicompParser.NUM, 0); }
		public ITerminalNode ID() { return GetToken(IsicompParser.ID, 0); }
		public ITerminalNode T_APARENT() { return GetToken(IsicompParser.T_APARENT, 0); }
		public Exp_terContext exp_ter() {
			return GetRuleContext<Exp_terContext>(0);
		}
		public ITerminalNode T_FPARENT() { return GetToken(IsicompParser.T_FPARENT, 0); }
		public TermoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_termo; } }
		public override void EnterRule(IParseTreeListener listener) {
			IIsicompListener typedListener = listener as IIsicompListener;
			if (typedListener != null) typedListener.EnterTermo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIsicompListener typedListener = listener as IIsicompListener;
			if (typedListener != null) typedListener.ExitTermo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsicompVisitor<TResult> typedVisitor = visitor as IIsicompVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermoContext termo() {
		TermoContext _localctx = new TermoContext(Context, State);
		EnterRule(_localctx, 14, RULE_termo);
		try {
			State = 98;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 92; Match(NUM);
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 93; Match(ID);
				}
				break;
			case T_APARENT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 94; Match(T_APARENT);
				State = 95; exp_ter();
				State = 96; Match(T_FPARENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeContext : ParserRuleContext {
		public ITerminalNode T_APARENT() { return GetToken(IsicompParser.T_APARENT, 0); }
		public Exp_relacionalContext exp_relacional() {
			return GetRuleContext<Exp_relacionalContext>(0);
		}
		public ITerminalNode T_FPARENT() { return GetToken(IsicompParser.T_FPARENT, 0); }
		public BlococomandoContext[] blococomando() {
			return GetRuleContexts<BlococomandoContext>();
		}
		public BlococomandoContext blococomando(int i) {
			return GetRuleContext<BlococomandoContext>(i);
		}
		public SeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_se; } }
		public override void EnterRule(IParseTreeListener listener) {
			IIsicompListener typedListener = listener as IIsicompListener;
			if (typedListener != null) typedListener.EnterSe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIsicompListener typedListener = listener as IIsicompListener;
			if (typedListener != null) typedListener.ExitSe(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsicompVisitor<TResult> typedVisitor = visitor as IIsicompVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeContext se() {
		SeContext _localctx = new SeContext(Context, State);
		EnterRule(_localctx, 16, RULE_se);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; Match(T__3);
			State = 101; Match(T_APARENT);
			State = 102; exp_relacional();
			State = 103; Match(T_FPARENT);
			State = 104; Match(T__4);
			State = 105; blococomando();
			State = 109;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 106; Match(T__5);
				State = 107; Match(T__4);
				State = 108; blococomando();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtribuaContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(IsicompParser.ID, 0); }
		public ITerminalNode T_IGUAL() { return GetToken(IsicompParser.T_IGUAL, 0); }
		public Exp_terContext exp_ter() {
			return GetRuleContext<Exp_terContext>(0);
		}
		public ITerminalNode T_DOT() { return GetToken(IsicompParser.T_DOT, 0); }
		public AtribuaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atribua; } }
		public override void EnterRule(IParseTreeListener listener) {
			IIsicompListener typedListener = listener as IIsicompListener;
			if (typedListener != null) typedListener.EnterAtribua(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIsicompListener typedListener = listener as IIsicompListener;
			if (typedListener != null) typedListener.ExitAtribua(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsicompVisitor<TResult> typedVisitor = visitor as IIsicompVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtribua(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtribuaContext atribua() {
		AtribuaContext _localctx = new AtribuaContext(Context, State);
		EnterRule(_localctx, 18, RULE_atribua);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111; Match(ID);
			State = 112; Match(T_IGUAL);
			State = 113; exp_ter();
			State = 114; Match(T_DOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EscrevaContext : ParserRuleContext {
		public ITerminalNode T_APARENT() { return GetToken(IsicompParser.T_APARENT, 0); }
		public ITerminalNode T_FPARENT() { return GetToken(IsicompParser.T_FPARENT, 0); }
		public ITerminalNode T_DOT() { return GetToken(IsicompParser.T_DOT, 0); }
		public ITerminalNode ID() { return GetToken(IsicompParser.ID, 0); }
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public EscrevaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_escreva; } }
		public override void EnterRule(IParseTreeListener listener) {
			IIsicompListener typedListener = listener as IIsicompListener;
			if (typedListener != null) typedListener.EnterEscreva(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIsicompListener typedListener = listener as IIsicompListener;
			if (typedListener != null) typedListener.ExitEscreva(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsicompVisitor<TResult> typedVisitor = visitor as IIsicompVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEscreva(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EscrevaContext escreva() {
		EscrevaContext _localctx = new EscrevaContext(Context, State);
		EnterRule(_localctx, 20, RULE_escreva);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116; Match(T__6);
			State = 117; Match(T_APARENT);
			State = 120;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				{
				State = 118; Match(ID);
				}
				break;
			case T_ASPAS:
				{
				State = 119; @string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 122; Match(T_FPARENT);
			State = 123; Match(T_DOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeiaContext : ParserRuleContext {
		public ITerminalNode T_APARENT() { return GetToken(IsicompParser.T_APARENT, 0); }
		public ITerminalNode ID() { return GetToken(IsicompParser.ID, 0); }
		public ITerminalNode T_FPARENT() { return GetToken(IsicompParser.T_FPARENT, 0); }
		public ITerminalNode T_DOT() { return GetToken(IsicompParser.T_DOT, 0); }
		public LeiaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leia; } }
		public override void EnterRule(IParseTreeListener listener) {
			IIsicompListener typedListener = listener as IIsicompListener;
			if (typedListener != null) typedListener.EnterLeia(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIsicompListener typedListener = listener as IIsicompListener;
			if (typedListener != null) typedListener.ExitLeia(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsicompVisitor<TResult> typedVisitor = visitor as IIsicompVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeia(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LeiaContext leia() {
		LeiaContext _localctx = new LeiaContext(Context, State);
		EnterRule(_localctx, 22, RULE_leia);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125; Match(T__7);
			State = 126; Match(T_APARENT);
			State = 127; Match(ID);
			State = 128; Match(T_FPARENT);
			State = 129; Match(T_DOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnquantoContext : ParserRuleContext {
		public ITerminalNode T_APARENT() { return GetToken(IsicompParser.T_APARENT, 0); }
		public Exp_relacionalContext exp_relacional() {
			return GetRuleContext<Exp_relacionalContext>(0);
		}
		public ITerminalNode T_FPARENT() { return GetToken(IsicompParser.T_FPARENT, 0); }
		public ITerminalNode T_ACHAVE() { return GetToken(IsicompParser.T_ACHAVE, 0); }
		public BlococomandoContext blococomando() {
			return GetRuleContext<BlococomandoContext>(0);
		}
		public ITerminalNode T_FCHAVE() { return GetToken(IsicompParser.T_FCHAVE, 0); }
		public EnquantoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enquanto; } }
		public override void EnterRule(IParseTreeListener listener) {
			IIsicompListener typedListener = listener as IIsicompListener;
			if (typedListener != null) typedListener.EnterEnquanto(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIsicompListener typedListener = listener as IIsicompListener;
			if (typedListener != null) typedListener.ExitEnquanto(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsicompVisitor<TResult> typedVisitor = visitor as IIsicompVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnquanto(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnquantoContext enquanto() {
		EnquantoContext _localctx = new EnquantoContext(Context, State);
		EnterRule(_localctx, 24, RULE_enquanto);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131; Match(T__8);
			State = 132; Match(T_APARENT);
			State = 133; exp_relacional();
			State = 134; Match(T_FPARENT);
			State = 135; Match(T_ACHAVE);
			State = 136; blococomando();
			State = 137; Match(T_FCHAVE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FacaContext : ParserRuleContext {
		public ITerminalNode T_ACHAVE() { return GetToken(IsicompParser.T_ACHAVE, 0); }
		public BlococomandoContext blococomando() {
			return GetRuleContext<BlococomandoContext>(0);
		}
		public ITerminalNode T_FCHAVE() { return GetToken(IsicompParser.T_FCHAVE, 0); }
		public ITerminalNode T_APARENT() { return GetToken(IsicompParser.T_APARENT, 0); }
		public Exp_relacionalContext exp_relacional() {
			return GetRuleContext<Exp_relacionalContext>(0);
		}
		public ITerminalNode T_FPARENT() { return GetToken(IsicompParser.T_FPARENT, 0); }
		public ITerminalNode T_DOT() { return GetToken(IsicompParser.T_DOT, 0); }
		public FacaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_faca; } }
		public override void EnterRule(IParseTreeListener listener) {
			IIsicompListener typedListener = listener as IIsicompListener;
			if (typedListener != null) typedListener.EnterFaca(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIsicompListener typedListener = listener as IIsicompListener;
			if (typedListener != null) typedListener.ExitFaca(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsicompVisitor<TResult> typedVisitor = visitor as IIsicompVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFaca(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FacaContext faca() {
		FacaContext _localctx = new FacaContext(Context, State);
		EnterRule(_localctx, 26, RULE_faca);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139; Match(T__9);
			State = 140; Match(T_ACHAVE);
			State = 141; blococomando();
			State = 142; Match(T_FCHAVE);
			State = 143; Match(T__8);
			State = 144; Match(T_APARENT);
			State = 145; exp_relacional();
			State = 146; Match(T_FPARENT);
			State = 147; Match(T_DOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode[] T_ASPAS() { return GetTokens(IsicompParser.T_ASPAS); }
		public ITerminalNode T_ASPAS(int i) {
			return GetToken(IsicompParser.T_ASPAS, i);
		}
		public ITerminalNode[] LETTER() { return GetTokens(IsicompParser.LETTER); }
		public ITerminalNode LETTER(int i) {
			return GetToken(IsicompParser.LETTER, i);
		}
		public ITerminalNode[] NUM() { return GetTokens(IsicompParser.NUM); }
		public ITerminalNode NUM(int i) {
			return GetToken(IsicompParser.NUM, i);
		}
		public ITerminalNode[] WS() { return GetTokens(IsicompParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(IsicompParser.WS, i);
		}
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			IIsicompListener typedListener = listener as IIsicompListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIsicompListener typedListener = listener as IIsicompListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIsicompVisitor<TResult> typedVisitor = visitor as IIsicompVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 28, RULE_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149; Match(T_ASPAS);
			State = 151;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 150;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NUM) | (1L << LETTER) | (1L << WS))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NUM) | (1L << LETTER) | (1L << WS))) != 0) );
			State = 155; Match(T_ASPAS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '-', '\xA0', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x3', 
		'\x2', '\x3', '\x2', '\x5', '\x2', '#', '\n', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x5', '\x2', '\'', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', 
		'\x2', '+', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x5', '\x3', '\x32', '\n', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\x37', '\n', '\x3', '\f', '\x3', 
		'\xE', '\x3', ':', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', 
		'\x6', '\x4', '?', '\n', '\x4', '\r', '\x4', '\xE', '\x4', '@', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', 'I', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\a', '\x6', 'N', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 'Q', 
		'\v', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', 'V', '\n', 
		'\a', '\f', '\a', '\xE', '\a', 'Y', '\v', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x65', '\n', '\t', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', 'p', '\n', '\n', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '{', '\n', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\x10', '\x3', '\x10', '\x6', '\x10', '\x9A', '\n', '\x10', 
		'\r', '\x10', '\xE', '\x10', '\x9B', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x2', '\x2', '\x11', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', '\x2', 
		'\x4', '\x4', '\x2', '\xE', '\xE', '\x12', '\x12', '\x5', '\x2', '\x12', 
		'\x12', '\x15', '\x15', '-', '-', '\x2', '\xA2', '\x2', ' ', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '/', '\x3', '\x2', '\x2', '\x2', '\x6', '>', '\x3', 
		'\x2', '\x2', '\x2', '\b', 'H', '\x3', '\x2', '\x2', '\x2', '\n', 'J', 
		'\x3', '\x2', '\x2', '\x2', '\f', 'R', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'Z', '\x3', '\x2', '\x2', '\x2', '\x10', '\x64', '\x3', '\x2', '\x2', 
		'\x2', '\x12', '\x66', '\x3', '\x2', '\x2', '\x2', '\x14', 'q', '\x3', 
		'\x2', '\x2', '\x2', '\x16', 'v', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\x7F', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x85', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x97', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\"', '\a', '\x3', '\x2', '\x2', '!', '#', '\a', 
		'-', '\x2', '\x2', '\"', '!', '\x3', '\x2', '\x2', '\x2', '\"', '#', '\x3', 
		'\x2', '\x2', '\x2', '#', '$', '\x3', '\x2', '\x2', '\x2', '$', '&', '\x5', 
		'\x4', '\x3', '\x2', '%', '\'', '\a', '-', '\x2', '\x2', '&', '%', '\x3', 
		'\x2', '\x2', '\x2', '&', '\'', '\x3', '\x2', '\x2', '\x2', '\'', '(', 
		'\x3', '\x2', '\x2', '\x2', '(', '*', '\x5', '\x6', '\x4', '\x2', ')', 
		'+', '\a', '-', '\x2', '\x2', '*', ')', '\x3', '\x2', '\x2', '\x2', '*', 
		'+', '\x3', '\x2', '\x2', '\x2', '+', ',', '\x3', '\x2', '\x2', '\x2', 
		',', '-', '\a', '\x4', '\x2', '\x2', '-', '.', '\a', '%', '\x2', '\x2', 
		'.', '\x3', '\x3', '\x2', '\x2', '\x2', '/', '\x31', '\a', '\x5', '\x2', 
		'\x2', '\x30', '\x32', '\a', '-', '\x2', '\x2', '\x31', '\x30', '\x3', 
		'\x2', '\x2', '\x2', '\x31', '\x32', '\x3', '\x2', '\x2', '\x2', '\x32', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x33', '\x38', '\a', '\xE', '\x2', 
		'\x2', '\x34', '\x35', '\a', '!', '\x2', '\x2', '\x35', '\x37', '\a', 
		'\xE', '\x2', '\x2', '\x36', '\x34', '\x3', '\x2', '\x2', '\x2', '\x37', 
		':', '\x3', '\x2', '\x2', '\x2', '\x38', '\x36', '\x3', '\x2', '\x2', 
		'\x2', '\x38', '\x39', '\x3', '\x2', '\x2', '\x2', '\x39', ';', '\x3', 
		'\x2', '\x2', '\x2', ':', '\x38', '\x3', '\x2', '\x2', '\x2', ';', '<', 
		'\a', '%', '\x2', '\x2', '<', '\x5', '\x3', '\x2', '\x2', '\x2', '=', 
		'?', '\x5', '\b', '\x5', '\x2', '>', '=', '\x3', '\x2', '\x2', '\x2', 
		'?', '@', '\x3', '\x2', '\x2', '\x2', '@', '>', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x41', '\x3', '\x2', '\x2', '\x2', '\x41', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\x42', 'I', '\x5', '\x18', '\r', '\x2', '\x43', 'I', '\x5', '\x16', 
		'\f', '\x2', '\x44', 'I', '\x5', '\x14', '\v', '\x2', '\x45', 'I', '\x5', 
		'\x12', '\n', '\x2', '\x46', 'I', '\x5', '\x1A', '\xE', '\x2', 'G', 'I', 
		'\x5', '\x1C', '\xF', '\x2', 'H', '\x42', '\x3', '\x2', '\x2', '\x2', 
		'H', '\x43', '\x3', '\x2', '\x2', '\x2', 'H', '\x44', '\x3', '\x2', '\x2', 
		'\x2', 'H', '\x45', '\x3', '\x2', '\x2', '\x2', 'H', '\x46', '\x3', '\x2', 
		'\x2', '\x2', 'H', 'G', '\x3', '\x2', '\x2', '\x2', 'I', '\t', '\x3', 
		'\x2', '\x2', '\x2', 'J', 'O', '\x5', '\f', '\a', '\x2', 'K', 'L', '\a', 
		'\xF', '\x2', '\x2', 'L', 'N', '\x5', '\f', '\a', '\x2', 'M', 'K', '\x3', 
		'\x2', '\x2', '\x2', 'N', 'Q', '\x3', '\x2', '\x2', '\x2', 'O', 'M', '\x3', 
		'\x2', '\x2', '\x2', 'O', 'P', '\x3', '\x2', '\x2', '\x2', 'P', '\v', 
		'\x3', '\x2', '\x2', '\x2', 'Q', 'O', '\x3', '\x2', '\x2', '\x2', 'R', 
		'W', '\a', '\x12', '\x2', '\x2', 'S', 'T', '\a', '\x10', '\x2', '\x2', 
		'T', 'V', '\x5', '\x10', '\t', '\x2', 'U', 'S', '\x3', '\x2', '\x2', '\x2', 
		'V', 'Y', '\x3', '\x2', '\x2', '\x2', 'W', 'U', '\x3', '\x2', '\x2', '\x2', 
		'W', 'X', '\x3', '\x2', '\x2', '\x2', 'X', '\r', '\x3', '\x2', '\x2', 
		'\x2', 'Y', 'W', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\t', '\x2', '\x2', 
		'\x2', '[', '\\', '\a', '\x13', '\x2', '\x2', '\\', ']', '\t', '\x2', 
		'\x2', '\x2', ']', '\xF', '\x3', '\x2', '\x2', '\x2', '^', '\x65', '\a', 
		'\x12', '\x2', '\x2', '_', '\x65', '\a', '\xE', '\x2', '\x2', '`', '\x61', 
		'\a', '\"', '\x2', '\x2', '\x61', '\x62', '\x5', '\n', '\x6', '\x2', '\x62', 
		'\x63', '\a', '#', '\x2', '\x2', '\x63', '\x65', '\x3', '\x2', '\x2', 
		'\x2', '\x64', '^', '\x3', '\x2', '\x2', '\x2', '\x64', '_', '\x3', '\x2', 
		'\x2', '\x2', '\x64', '`', '\x3', '\x2', '\x2', '\x2', '\x65', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\a', '\x6', '\x2', '\x2', 'g', 
		'h', '\a', '\"', '\x2', '\x2', 'h', 'i', '\x5', '\xE', '\b', '\x2', 'i', 
		'j', '\a', '#', '\x2', '\x2', 'j', 'k', '\a', '\a', '\x2', '\x2', 'k', 
		'o', '\x5', '\x6', '\x4', '\x2', 'l', 'm', '\a', '\b', '\x2', '\x2', 'm', 
		'n', '\a', '\a', '\x2', '\x2', 'n', 'p', '\x5', '\x6', '\x4', '\x2', 'o', 
		'l', '\x3', '\x2', '\x2', '\x2', 'o', 'p', '\x3', '\x2', '\x2', '\x2', 
		'p', '\x13', '\x3', '\x2', '\x2', '\x2', 'q', 'r', '\a', '\xE', '\x2', 
		'\x2', 'r', 's', '\a', ' ', '\x2', '\x2', 's', 't', '\x5', '\n', '\x6', 
		'\x2', 't', 'u', '\a', '%', '\x2', '\x2', 'u', '\x15', '\x3', '\x2', '\x2', 
		'\x2', 'v', 'w', '\a', '\t', '\x2', '\x2', 'w', 'z', '\a', '\"', '\x2', 
		'\x2', 'x', '{', '\a', '\xE', '\x2', '\x2', 'y', '{', '\x5', '\x1E', '\x10', 
		'\x2', 'z', 'x', '\x3', '\x2', '\x2', '\x2', 'z', 'y', '\x3', '\x2', '\x2', 
		'\x2', '{', '|', '\x3', '\x2', '\x2', '\x2', '|', '}', '\a', '#', '\x2', 
		'\x2', '}', '~', '\a', '%', '\x2', '\x2', '~', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x7F', '\x80', '\a', '\n', '\x2', '\x2', '\x80', '\x81', '\a', 
		'\"', '\x2', '\x2', '\x81', '\x82', '\a', '\xE', '\x2', '\x2', '\x82', 
		'\x83', '\a', '#', '\x2', '\x2', '\x83', '\x84', '\a', '%', '\x2', '\x2', 
		'\x84', '\x19', '\x3', '\x2', '\x2', '\x2', '\x85', '\x86', '\a', '\v', 
		'\x2', '\x2', '\x86', '\x87', '\a', '\"', '\x2', '\x2', '\x87', '\x88', 
		'\x5', '\xE', '\b', '\x2', '\x88', '\x89', '\a', '#', '\x2', '\x2', '\x89', 
		'\x8A', '\a', '\'', '\x2', '\x2', '\x8A', '\x8B', '\x5', '\x6', '\x4', 
		'\x2', '\x8B', '\x8C', '\a', '(', '\x2', '\x2', '\x8C', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\x8D', '\x8E', '\a', '\f', '\x2', '\x2', '\x8E', 
		'\x8F', '\a', '\'', '\x2', '\x2', '\x8F', '\x90', '\x5', '\x6', '\x4', 
		'\x2', '\x90', '\x91', '\a', '(', '\x2', '\x2', '\x91', '\x92', '\a', 
		'\v', '\x2', '\x2', '\x92', '\x93', '\a', '\"', '\x2', '\x2', '\x93', 
		'\x94', '\x5', '\xE', '\b', '\x2', '\x94', '\x95', '\a', '#', '\x2', '\x2', 
		'\x95', '\x96', '\a', '%', '\x2', '\x2', '\x96', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\x97', '\x99', '\a', '$', '\x2', '\x2', '\x98', '\x9A', 
		'\t', '\x3', '\x2', '\x2', '\x99', '\x98', '\x3', '\x2', '\x2', '\x2', 
		'\x9A', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x99', '\x3', '\x2', 
		'\x2', '\x2', '\x9B', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9D', 
		'\x3', '\x2', '\x2', '\x2', '\x9D', '\x9E', '\a', '$', '\x2', '\x2', '\x9E', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\xF', '\"', '&', '*', '\x31', '\x38', 
		'@', 'H', 'O', 'W', '\x64', 'o', 'z', '\x9B',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
